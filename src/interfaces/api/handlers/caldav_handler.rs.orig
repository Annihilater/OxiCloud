use axum::{
    Router,
    routing::{get, put, delete, any},
    extract::{Path, State, Request},
    http::{StatusCode, HeaderMap},
    response::{IntoResponse, Response},
    body::Body,
    Json,
};
use tracing::error;
use std::sync::Arc;
use serde_json::json;

use crate::common::di::AppState;
use crate::application::dtos::calendar_dto::{
    CalendarDto, CreateCalendarDto, UpdateCalendarDto, 
    CalendarEventDto, CreateEventDto as CreateCalendarEventDto, 
    UpdateEventDto as UpdateCalendarEventDto
};

// CalDAV handler implementation
pub fn caldav_routes() -> Router<AppState> {
    Router::new()
        // Calendar operations
        .route("/calendars", get(list_calendars))
        .route("/calendars/:calendar_id", 
            get(get_calendar)
            .put(update_calendar)
            .delete(delete_calendar)
        )
        .route("/calendars/:calendar_id/events", 
            get(list_events)
            .post(create_event)
        )
        .route("/calendars/:calendar_id/events/:event_id", 
            get(get_event)
            .put(update_event)
            .delete(delete_event)
        )
}

async fn list_calendars(
    State(state): State<AppState>,
) -> impl IntoResponse {
    let user_id = "default_user"; // In production, get this from auth middleware
    
    match &state.calendar_service {
        Some(calendar_service) => {
            let params = json!({
                "user_id": user_id
            });
            
            match calendar_service.handle_request("list_user_calendars", params).await {
                Ok(result) => {
                    let calendars: Vec<CalendarDto> = serde_json::from_value(result)
                        .unwrap_or_else(|_| Vec::new());
                    (StatusCode::OK, Json(calendars))
                },
                Err(e) => {
                    (StatusCode::INTERNAL_SERVER_ERROR, Json(json!({
                        "error": format!("Failed to list calendars: {}", e)
                    })))
                }
            }
        },
        None => {
            (StatusCode::NOT_IMPLEMENTED, Json(json!({
                "error": "Calendar service not available"
            })))
        }
    }
}

async fn get_calendar(
    State(state): State<AppState>,
    Path(calendar_id): Path<String>,
) -> impl IntoResponse {
    let user_id = "default_user"; // In production, get this from auth middleware
    
    match &state.calendar_service {
        Some(calendar_service) => {
            let params = json!({
                "calendar_id": calendar_id,
                "user_id": user_id
            });
            
            match calendar_service.handle_request("get_calendar", params).await {
                Ok(result) => {
                    let calendar: CalendarDto = serde_json::from_value(result)
                        .unwrap_or_else(|_| CalendarDto::default());
                    (StatusCode::OK, Json(calendar))
                },
                Err(e) => {
                    (StatusCode::INTERNAL_SERVER_ERROR, Json(json!({
                        "error": format!("Failed to get calendar: {}", e)
                    })))
                }
            }
        },
        None => {
            (StatusCode::NOT_IMPLEMENTED, Json(json!({
                "error": "Calendar service not available"
            })))
        }
    }
}

async fn update_calendar(
    State(state): State<AppState>,
    Path(calendar_id): Path<String>,
    Json(update): Json<UpdateCalendarDto>,
) -> impl IntoResponse {
    let user_id = "default_user"; // In production, get this from auth middleware
    
    // Set the user ID in the update
    let mut update_with_user = update;
    update_with_user.user_id = user_id.to_string();
    
    match &state.calendar_service {
        Some(calendar_service) => {
            match calendar_service.handle_request("update_calendar", json!({
                "calendar_id": calendar_id,
                "name": update_with_user.name,
                "description": update_with_user.description,
                "color": update_with_user.color,
                "is_public": update_with_user.is_public,
                "user_id": update_with_user.user_id
            })).await {
                Ok(result) => {
                    let calendar: CalendarDto = serde_json::from_value(result)
                        .unwrap_or_else(|_| CalendarDto::default());
                    (StatusCode::OK, Json(calendar))
                },
                Err(e) => {
                    (StatusCode::INTERNAL_SERVER_ERROR, Json(json!({
                        "error": format!("Failed to update calendar: {}", e)
                    })))
                }
            }
        },
        None => {
            (StatusCode::NOT_IMPLEMENTED, Json(json!({
                "error": "Calendar service not available"
            })))
        }
    }
}

async fn delete_calendar(
    State(state): State<AppState>,
    Path(calendar_id): Path<String>,
) -> impl IntoResponse {
    let user_id = "default_user"; // In production, get this from auth middleware
    
    match &state.calendar_service {
        Some(calendar_service) => {
            let params = json!({
                "calendar_id": calendar_id,
                "user_id": user_id
            });
            
            match calendar_service.handle_request("delete_calendar", params).await {
                Ok(_) => {
                    (StatusCode::NO_CONTENT, Json(json!({})))
                },
                Err(e) => {
                    (StatusCode::INTERNAL_SERVER_ERROR, Json(json!({
                        "error": format!("Failed to delete calendar: {}", e)
                    })))
                }
            }
        },
        None => {
            (StatusCode::NOT_IMPLEMENTED, Json(json!({
                "error": "Calendar service not available"
            })))
        }
    }
}

async fn list_events(
    State(state): State<AppState>,
    Path(calendar_id): Path<String>,
) -> impl IntoResponse {
    let user_id = "default_user"; // In production, get this from auth middleware
    
    match &state.calendar_service {
        Some(calendar_service) => {
            let params = json!({
                "calendar_id": calendar_id,
                "user_id": user_id
            });
            
            match calendar_service.handle_request("list_events", params).await {
                Ok(result) => {
                    let events: Vec<CalendarEventDto> = serde_json::from_value(result)
                        .unwrap_or_else(|_| Vec::new());
                    (StatusCode::OK, Json(events))
                },
                Err(e) => {
                    (StatusCode::INTERNAL_SERVER_ERROR, Json(json!({
                        "error": format!("Failed to list events: {}", e)
                    })))
                }
            }
        },
        None => {
            (StatusCode::NOT_IMPLEMENTED, Json(json!({
                "error": "Calendar service not available"
            })))
        }
    }
}

async fn create_event(
    State(state): State<AppState>,
    Path(calendar_id): Path<String>,
    Json(mut event): Json<CreateCalendarEventDto>,
) -> impl IntoResponse {
    let user_id = "default_user"; // In production, get this from auth middleware
    
    // Set the calendar ID and user ID in the event
    event.calendar_id = calendar_id;
    event.user_id = user_id.to_string();
    
    match &state.calendar_service {
        Some(calendar_service) => {
            match calendar_service.handle_request("create_event", serde_json::to_value(event).unwrap()).await {
                Ok(result) => {
                    let event: CalendarEventDto = serde_json::from_value(result)
                        .unwrap_or_else(|_| CalendarEventDto::default());
                    (StatusCode::CREATED, Json(event))
                },
                Err(e) => {
                    let error_dto = CalendarEventDto::default();
                    error!(
                        "Failed to create event: {}",
                        e
                    );
                    (StatusCode::INTERNAL_SERVER_ERROR, Json(error_dto))
                }
            }
        },
        None => {
            (StatusCode::NOT_IMPLEMENTED, Json(json!({
                "error": "Calendar service not available"
            })))
        }
    }
}

async fn get_event(
    State(state): State<AppState>,
    Path((calendar_id, event_id)): Path<(String, String)>,
) -> impl IntoResponse {
    let user_id = "default_user"; // In production, get this from auth middleware
    
    match &state.calendar_service {
        Some(calendar_service) => {
            let params = json!({
                "event_id": event_id,
                "user_id": user_id
            });
            
            match calendar_service.handle_request("get_event", params).await {
                Ok(result) => {
                    let event: CalendarEventDto = serde_json::from_value(result)
                        .unwrap_or_else(|_| CalendarEventDto::default());
                    (StatusCode::OK, Json(event))
                },
                Err(e) => {
                    let error_dto = CalendarEventDto::default();
                    error!(
                        "Failed to get event: {}",
                        e
                    );
                    (StatusCode::INTERNAL_SERVER_ERROR, Json(error_dto))
                }
            }
        },
        None => {
            (StatusCode::NOT_IMPLEMENTED, Json(json!({
                "error": "Calendar service not available"
            })))
        }
    }
}

async fn update_event(
    State(state): State<AppState>,
    Path((calendar_id, event_id)): Path<(String, String)>,
    Json(mut update): Json<UpdateCalendarEventDto>,
) -> impl IntoResponse {
    let user_id = "default_user"; // In production, get this from auth middleware
    
    // Set the user ID in the update
    update.user_id = user_id.to_string();
    
    match &state.calendar_service {
        Some(calendar_service) => {
            let mut params = serde_json::to_value(update).unwrap();
            
            // Add event_id to the params
            if let serde_json::Value::Object(ref mut map) = params {
                map.insert("event_id".to_string(), serde_json::Value::String(event_id));
            }
            
            match calendar_service.handle_request("update_event", params).await {
                Ok(result) => {
                    let event: CalendarEventDto = serde_json::from_value(result)
                        .unwrap_or_else(|_| CalendarEventDto::default());
                    (StatusCode::OK, Json(event))
                },
                Err(e) => {
                    let error_dto = CalendarEventDto::default();
                    error!(
                        "Failed to update event: {}",
                        e
                    );
                    (StatusCode::INTERNAL_SERVER_ERROR, Json(error_dto))
                }
            }
        },
        None => {
            (StatusCode::NOT_IMPLEMENTED, Json(json!({
                "error": "Calendar service not available"
            })))
        }
    }
}

async fn delete_event(
    State(state): State<AppState>,
    Path((calendar_id, event_id)): Path<(String, String)>,
) -> impl IntoResponse {
    let user_id = "default_user"; // In production, get this from auth middleware
    
    match &state.calendar_service {
        Some(calendar_service) => {
            let params = json!({
                "event_id": event_id,
                "user_id": user_id
            });
            
            match calendar_service.handle_request("delete_event", params).await {
                Ok(_) => {
                    (StatusCode::NO_CONTENT, Json(json!({})))
                },
                Err(e) => {
                    (StatusCode::INTERNAL_SERVER_ERROR, Json(json!({
                        "error": format!("Failed to delete event: {}", e)
                    })))
                }
            }
        },
        None => {
            (StatusCode::NOT_IMPLEMENTED, Json(json!({
                "error": "Calendar service not available"
            })))
        }
    }
}